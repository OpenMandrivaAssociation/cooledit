diff -Nrup a/lib/c_utils.py b/lib/c_utils.py
--- a/lib/c_utils.py	2005-04-04 22:47:45.000000000 +0200
+++ b/lib/c_utils.py	2020-02-27 18:21:54.332619426 +0100
@@ -8,13 +8,13 @@ def count_braces ():
     i = current_line ()
     s = ""
     for j in xrange (i, 0, -1):
-	s = get_line (j)
-	if string.strip (s):		# find non-blank line
-	    break
+        s = get_line (j)
+        if string.strip (s):            # find non-blank line
+            break
     j = 0
     for c in s:
-	if c == "{":			# count curly braces
-	    j = j + 1
+        if c == "{":                    # count curly braces
+            j = j + 1
     return j
 
 def generic(s, d):
@@ -33,10 +33,10 @@ def case():
     i = current_line ()
     s = ""
     for j in xrange (i, 0, -1):
-	s = get_line (j)
-	if s:
-	    if string.find (s, "switch") >= 0 or s[0] == "{":		# find switch statement
-		break
+        s = get_line (j)
+        if s:
+            if string.find (s, "switch") >= 0 or s[0] == "{":       # find switch statement
+                break
     s = s[:len (s) - len (string.lstrip (s))]
     go_eol ()
     insert ("\n")
diff -Nrup a/lib/global.py b/lib/global.py
--- a/lib/global.py	2005-04-04 22:47:45.000000000 +0200
+++ b/lib/global.py	2020-02-27 18:22:54.240100638 +0100
@@ -4,28 +4,28 @@
 def type_change(s):
     menu ("Util")	# clear the Util menu
     if s == "C/C++ Program":
-	import c_utils
-	# make it global
-	globals()["c_utils"] = c_utils
-	menu ("Util", "for(;;) {", "c_utils.generic('for (;;) {', 5)")
-	menu ("Util", "while() {", "c_utils.generic('while () {', 7)")
-	menu ("Util", "do {", "c_utils.do_while()")
-	menu ("Util", "switch() {", "c_utils.generic('switch () {', 8)")
-	menu ("Util", "case:", "c_utils.case()")
-	menu ("Util", "if() {", "c_utils.generic('if () {', 4)")
-	menu ("Util", "main() {", "c_utils.main()")
-	menu ("Util", "#include ", "c_utils.include()")
-	menu ("Util", "printf();", "c_utils.printf()")
+        import c_utils
+        # make it global
+        globals()["c_utils"] = c_utils
+        menu ("Util", "for(;;) {", "c_utils.generic('for (;;) {', 5)")
+        menu ("Util", "while() {", "c_utils.generic('while () {', 7)")
+        menu ("Util", "do {", "c_utils.do_while()")
+        menu ("Util", "switch() {", "c_utils.generic('switch () {', 8)")
+        menu ("Util", "case:", "c_utils.case()")
+        menu ("Util", "if() {", "c_utils.generic('if () {', 4)")
+        menu ("Util", "main() {", "c_utils.main()")
+        menu ("Util", "#include ", "c_utils.include()")
+        menu ("Util", "printf();", "c_utils.printf()")
 
     if s == "Shell Script":
-	import sh_utils
-	# make it global
-	globals()["sh_utils"] = sh_utils
-	menu ("Util", "for", "sh_utils.generic ('for i in * ; do\\n\\t\\n\\bdone\\n' % (), 9)")
-	menu ("Util", "while", "sh_utils.generic('while true ; do\\n\\t\\n\\bdone\\n' % (), 10)")
-	menu ("Util", "until", "sh_utils.generic('until true ; do\\n\\t\\n\\bdone\\n' % (), 10)")
-	menu ("Util", "case", "sh_utils.case ()")
-	menu ("Util", "function", "sh_utils.generic('function foo ()\\n' % (), 12)")
-	menu ("Util", "if", "sh_utils.generic('if test \\\"\\\" = \\\"\\\" ; then\\n\\t\\n\\bfi\\n' % (), 9)")
-	menu ("Util", "if... else... elif", "sh_utils.generic('if test \\\"\\\" = \\\"\\\" ; then\\n\\t\\n\\belif test \\\"\\\" = \\\"\\\" ; then\\n\\t\\n\\belse\\n\\t\\n\\bfi\\n' % (), 9)")
+        import sh_utils
+        # make it global
+        globals()["sh_utils"] = sh_utils
+        menu ("Util", "for", "sh_utils.generic ('for i in * ; do\\n\\t\\n\\bdone\\n' % (), 9)")
+        menu ("Util", "while", "sh_utils.generic('while true ; do\\n\\t\\n\\bdone\\n' % (), 10)")
+        menu ("Util", "until", "sh_utils.generic('until true ; do\\n\\t\\n\\bdone\\n' % (), 10)")
+        menu ("Util", "case", "sh_utils.case ()")
+        menu ("Util", "function", "sh_utils.generic('function foo ()\\n' % (), 12)")
+        menu ("Util", "if", "sh_utils.generic('if test \\\"\\\" = \\\"\\\" ; then\\n\\t\\n\\bfi\\n' % (), 9)")
+        menu ("Util", "if... else... elif", "sh_utils.generic('if test \\\"\\\" = \\\"\\\" ; then\\n\\t\\n\\belif test \\\"\\\" = \\\"\\\" ; then\\n\\t\\n\\belse\\n\\t\\n\\bfi\\n' % (), 9)")
 
diff -Nrup a/lib/sh_utils.py b/lib/sh_utils.py
--- a/lib/sh_utils.py	2005-04-04 22:47:45.000000000 +0200
+++ b/lib/sh_utils.py	2020-02-27 18:23:35.595432805 +0100
@@ -3,12 +3,12 @@ from cooledit import *
 def generic(s, d):
     k = current ()
     for c in s:
-	if c == '\t':
-	    indent (1)
-	elif c == '\b':
-	    indent (0)
-	else:
-	    insert (c)
+        if c == '\t':
+            indent (1)
+        elif c == '\b':
+            indent (0)
+        else:
+            insert (c)
     move_to (k + d)
     redraw_page ()
 
